package packTaller2NoOf;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;



public class Main {
	private static Scanner scan;
	

	public static void main(String[] args) throws FileNotFoundException 
	{
		ArrayList<PC> listaPCS = new ArrayList<>(); // se crea lista vacia de tipo PC
		llenarlistaPCS("pcs.txt",listaPCS);	// Se rellena lista vacia con objetos de tipo PC
		
		ArrayList<Puerto> listaPuertos = new ArrayList<>();// se crea lista vacia de tipo PUERTO
		rellenarlistaPuertos("puertos.txt",listaPuertos,listaPCS); // Se rellena lista vacia con objetos de tipo PC y se rellena lista puerto de la clase PC
		
		ArrayList<Vulnerabilidad> listaVulnerabilidad = new ArrayList<>(); // Se rellena lista vacia con objetos de tipo VULNERABILIDAD
		rellenarlistaVulnerabildad("vulnerabilidades.txt", listaVulnerabilidad,listaPuertos);//  Se rellena lista vacia con objetos tipo VURNERABILIDAD y se llena lista puerto para su vulnerabilidad
		
		
		scan = new Scanner(System.in);
		String menuElegido= "";
		int opcionElegida = 0;
		
		do {
			System.out.print("Eliga un menú Usurario o Administrador (U / A / S para salir): ");
			menuElegido = scan.nextLine().toUpperCase();
		
			switch (menuElegido) {
			
			case "U":
				System.out.println();
				System.out.println("Menú Usuario");
				System.out.println();
				System.out.println("1. Ver lista de PCS");
				System.out.println("2. Escanear un PC");
				System.out.println("3. Ver total de puertos abiertos en todos los PCS de la red");
				System.out.println("4. Ordenar PCS según IP");
				System.out.print("Ingrese una opcion > ");
				
				opcionElegida = Integer.valueOf(scan.nextLine());
				
				switch (opcionElegida) {//inicia switch Menú usuario
				case 1:
					System.out.println("-----------------------------");
					System.out.println("Lista de PCS:");
					System.out.println();
					mostrarListaPCS(listaPCS);
					break;
				case 2:
					System.out.println("-----------------------------");
					System.out.println("Escanear un PC");
					System.out.println();
					System.out.print("Ingrese un PC ( ej 'PC002' o 'PC010'): ");
					String pcElegido = scan.nextLine();
					
					mostrarPuertosPcElegido(pcElegido,listaPCS); // se llama al metodo que mostrara el PC elegido 
					System.out.println();
					

					break;
				case 3:
					System.out.println("-----------------------------");
					System.out.println("Puertos abiertos");
					System.out.println();
					mostrarTotalPuertosAbiertos(listaPuertos);//muestra el total de puertos abiertos 
					break;
				case 4:
					System.out.println("-----------------------------");
					System.out.println("PCS ORDENADOS SEGUN SU IP");
					System.out.println();
					mostrarIPordenada(listaPCS);
					
					break;
					
					
				}// aqui termina switch de opciones Menú usuario
				
				
				
				break;// break para salir de la opcion Usuario
				
				
			case "A":
				System.out.println();
				System.out.println("Menú Admin ");
				System.out.println();
				System.out.println("1. Ver lista completa de PCS junto a su información");
				System.out.println("2. Agregar o eliminar un PC de la lista");
				System.out.println("3. Clasificar PCS según su nivel de riesgo");
				System.out.print("Ingrese una opcion > ");
				opcionElegida = Integer.valueOf(scan.nextLine());
				
				switch (opcionElegida) {//inicia switch Menú usuario
				case 1:
					System.out.println("-----------------------------");
					System.out.println("Lista completa de PCS: ");
					System.out.println();
					
					break;
				case 2:
					System.out.println("-----------------------------");
					//
					System.out.println();

					break;
				case 3:
					System.out.println("-----------------------------");
					System.out.println("Total de puertos abiertos");
					System.out.println();
					
					break;
		
				
				}// aqui termina switch de opciones Menú admin 
				
				break;//break salir para la opcion admin
				
			case "S":
				break;
			default:
				System.out.println("Menú no valido, intene de nuevo.");
				break;//break 
			}//Hasta aqui llega el switch de los menus
				
		} while (!menuElegido.equalsIgnoreCase("S"));// while que rompe el progama si se elige "S"
		System.out.println("Saliendo...");
		
	}
	public static void llenarlistaPCS(String arch , ArrayList<PC> listapcs) throws FileNotFoundException 
	{ // este metodo tiene como funcion rellenar la lista PC, accediendo al archivo PCS
		Scanner scan = new Scanner(new File(arch));
		while(scan.hasNextLine()) {
			String linea = scan.nextLine();
			String[] partes = linea.split("\\|");
			
			String idPc = partes[0];
			String ipPc = partes[1];
			String sistemaOperativoPc = partes[2];
			
			PC pc = new PC(idPc, ipPc, sistemaOperativoPc);
			listapcs.add(pc);
			
		}scan.close();
	}
	public static void mostrarListaPCS(ArrayList<PC> listapcs) 
	{// este metodo tiene como funcion mostrar las listasPC
		for (int i = 0; i< listapcs.size(); i ++) {
			String idPc = listapcs.get(i).getIdPC();
			String ipPc = listapcs.get(i).getIpPC();
			String sistema = listapcs.get(i).getSistemaOperativoPc();
			System.out.println("ID PC : "+idPc);
			System.out.println("IP PC : "+ipPc);
			System.out.println("Sistema operativo : "+sistema);
			System.out.println();
			
		}
	}
	public static void rellenarlistaPuertos(String arch, ArrayList<Puerto> listaPuertos, ArrayList<PC> listapc) throws FileNotFoundException 
	{// este metodo tiene como funcion rellenar de objetos la lista de puertos y agregar objetos a la lista " listaPuertosDelPc" de la clase PC
		Scanner scan = new Scanner(new File(arch));
		while(scan.hasNextLine()) {
			String linea = scan.nextLine();
			String[] partes = linea.split("\\|");
			
			String idPc = partes[0];
			int numeroPuerto = Integer.valueOf(partes[1]);
			String estadoPuerto = partes[2];
			
			Puerto puerto = new Puerto(idPc, numeroPuerto, estadoPuerto);
			listaPuertos.add(puerto);
			for (int i = 0; i<listapc.size(); i++) {
				if(listapc.get(i).getIdPC().equals(idPc)) {
					listapc.get(i).agregarPuertos(puerto);

				}
			}
			
		}
	}
	public static void rellenarlistaVulnerabildad(String arch, ArrayList<Vulnerabilidad> listaVulne, ArrayList<Puerto> listaPuerto	) throws FileNotFoundException 
	{// este metodo tiene como funcion agregar objetos  la list VULNERABILIDAD, tiene como otro parametro la lista de puertos ya creada con objetos, en ella se accede y se agregan objetos  al lista "listaVulnerabiliadadPuerto" de la clase PUERTO 
		Scanner scan = new Scanner(new File(arch));
		while(scan.hasNextLine()) {
			String linea  = scan.nextLine();
			String[] partes = linea.split("\\|");
			
			int idPuerto = Integer.valueOf(partes[0]);
			String nombreVulne  = partes[1];
			String descripcionVulne = partes[2];
			
			Vulnerabilidad vulnerabilidad = new Vulnerabilidad(idPuerto, nombreVulne, descripcionVulne);
			listaVulne.add(vulnerabilidad);
			for(int i = 0; i<listaPuerto.size(); i++) {
				if(listaPuerto.get(i).getNumeroPuerto() == idPuerto) {
					listaPuerto.get(i).agregarVulnerabilidades(vulnerabilidad);
				}
			}
			
		}
		
	}
	public static void mostrarPuertosPcElegido(String pc, ArrayList<PC> listapc)
	{// solo printea el puerto elegido por el usuario 
		for (PC p : listapc) {
			if(p.getIdPC().equalsIgnoreCase(pc)) {
				System.out.println();
				System.out.println("PC : "+p.getIdPC());
				for(Puerto puerto : p.getListaPuertosDelPc()) {
					System.out.println("Puertos : "+ puerto.getNumeroPuerto()+ ", Estado :" +puerto.getEstadoPuerto());
					}
			   }
			}	
	}
	public static void mostrarTotalPuertosAbiertos(ArrayList<Puerto> listaPuerto) 
	{
		// muestra por pantalla el total de puertos abiertos
		int contar = 0;
		for(Puerto p : listaPuerto) {
			if(p.getEstadoPuerto().equalsIgnoreCase("Abierto")) {
				contar ++;
				System.out.println("PUERTO  : "+p.getNumeroPuerto());
				for(Vulnerabilidad v : p.getListaVulnerabiliadadPuerto()) {
					System.out.println("NOMBRE VULNERABILIDAD : "+ v.getNombreVulnerabilidad());
					System.out.println("DESCRIPCIPÓN VULNERABILIDAD : "+v.getDescripcionVulnerabilidad());
					System.err.println();
				}
			}
			
		}
		System.out.println("-----------------------------");
		System.out.println("TOTAL PUERTOS ABIERTOS : "+contar);
		System.out.println("-----------------------------");

	}
	public static void mostrarIPordenada(ArrayList<PC> listapcs) {
		// este metodo crea nuevos objetos de tipo Clase, luego se accede a cada objeto con for each para acceder agregar datos a la lista 
		// "listaTipoClase" de la clase "Clase", se rellena con objetos tipo clase para acceder a ellos con una condicion (la condicion de las ip)
		// luego se muestra por pantalla llamando a un metodo dentro de la clase "Clase"
		Clase claseA = new Clase("A");
		Clase claseB = new Clase("B");
		Clase claseC = new Clase("C");
		
		for(PC p : listapcs) {
			String ipPC = p.getIpPC();
			String[] partes = ipPC.split("\\.");
			
			int primerNumero = Integer.valueOf(partes[0]);
			
			if(primerNumero>= 0 && primerNumero<=127) {
				claseA.agregarListaTipoClase(p);
			}
			else if(primerNumero>= 128 && primerNumero<=191) {
				claseB.agregarListaTipoClase(p);
			}
			else if(primerNumero>= 192 && primerNumero<=223) {
				claseC.agregarListaTipoClase(p);
			}
		}
		claseA.imprimirPCsegunIP();
		claseB.imprimirPCsegunIP();
		claseC.imprimirPCsegunIP();

	}
}
